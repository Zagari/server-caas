---
- name: Deploy Cloudflare Updater Service
  hosts: castellabate_server
  become: yes
  vars:
    project_dir: "/home/ubuntu/cloudflare-updater"
    user: "ubuntu"
  
  # Carrega as variáveis do arquivo criptografado
  vars_files:
    - secrets.yml

  tasks:
    # Estas tarefas são idempotentes. Se Docker e Git já estiverem instalados, 
    # o Ansible simplesmente confirmará que está tudo OK sem fazer nada.
    - name: 1. System Setup - Verify that essential dependencies are installed
      ansible.builtin.apt:
        name:
          - git
          - docker-ce
          - docker-compose-plugin
          - ca-certificates
          - curl
          - gnupg
          - docker-ce
          - docker-ce-cli
          - containerd.io
          - docker-buildx-plugin
          - docker-compose-plugin
        state: present
        update_cache: yes      # É bom ter, caso algo precise ser instalado.  

    - name: 2. Application Deploy - Clone the Cloudflare Updater repository
      ansible.builtin.git:
        repo: 'https://github.com/Zagari/cloudflare-updater.git'
        dest: "{{ project_dir }}"
        clone: yes
        update: yes
      become_user: "{{ user }}"

    - name: 3. Application Config - Create .env file from template
      ansible.builtin.template:
        src: .env.j2  # Nosso arquivo de template local
        dest: "{{ project_dir }}/updt-service/.env" # Caminho de destino no servidor
        owner: "{{ user }}"
        group: "{{ user }}"
        mode: '0600'  # Permissões restritas, pois o arquivo contém segredos

    - name: 4. Run Application - Build and run docker-compose
      community.docker.docker_compose_v2:
        project_src: "{{ project_dir }}"
        state: present  # Garante que os containers estão de pé (faz build, create, start -d)